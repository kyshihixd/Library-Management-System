/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Home;

import java.sql.Connection;
import java.sql.Statement;
import java.sql.*;
import Utility.ConnectionDB;
import Utility.Utility;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.JOptionPane;
import org.jdesktop.swingx.JXComboBox;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;
/**
 *
 * @author rat
 */
public class AddBorrows extends javax.swing.JFrame {

    /**
     * Creates new form add
     */
    private static HomePage homePage;
    public AddBorrows( HomePage homePage) {
        initComponents();
        this.homePage = homePage;
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Add Borrow record");
        populateComboBoxes();
        this.setLocationRelativeTo(null);
        AutoCompleteDecorator.decorate(Username);
        AutoCompleteDecorator.decorate(Bookname);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        jDayChooser1 = new com.toedter.calendar.JDayChooser();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        Username = new javax.swing.JComboBox<>();
        Bookname = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        DueDate = new org.jdesktop.swingx.JXDatePicker();

        jLabel3.setText("EX: Advanced Mathematics, D.David, Eduction,9780060935467, 2, 2 ");

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jButton1.setText("Confirm");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel5.setText("Username");

        jLabel6.setText("Book name");

        jLabel7.setText("Due_date");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(59, 59, 59)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(DueDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(93, 93, 93)
                        .addComponent(jButton1))
                    .addComponent(jLabel5)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(Username, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(46, 46, 46)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(Bookname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(129, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(77, 77, 77)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Username, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Bookname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(50, 50, 50)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(DueDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addContainerGap(114, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String selectedUser = (String) Username.getSelectedItem();
        String selectedBook = (String) Bookname.getSelectedItem();
        java.util.Date dueDate = DueDate.getDate();

        if (selectedUser == null || selectedBook == null || dueDate == null) {
            JOptionPane.showMessageDialog(this, "All fields are required!", "Input Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        int userId = homePage.usersList.stream()
                .filter(user -> user.get("username").equals(selectedUser))
                .map(user -> (int) user.get("users_id"))
                .findFirst()
                .orElse(-1);

        int bookId = homePage.booksList.stream()
                .filter(book -> book.get("title").equals(selectedBook))
                .map(book -> (int) book.get("book_id"))
                .findFirst()
                .orElse(-1);

        Map<String, Object> bookToBorrow = homePage.booksList.stream()
            .filter(book -> book.get("book_id").equals(bookId))
            .findFirst()
            .orElse(null);

        if (bookToBorrow == null || (int) bookToBorrow.get("available_copies") <= 0) {
            JOptionPane.showMessageDialog(this, "Book is out of stock!", "Stock Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if (userId == -1 || bookId == -1) {
            JOptionPane.showMessageDialog(this, "Error finding user or book ID.", "Data Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        Map<String, Object> newBorrow = new HashMap<>();
        int nextId = homePage.borrowsList.stream().mapToInt(b -> (int) b.get("record_id")).max().orElse(0) + 1;
        newBorrow.put("record_id", nextId);
        newBorrow.put("users_id", userId);
        newBorrow.put("book_id", bookId);
        newBorrow.put("borrow_date", new java.sql.Date(System.currentTimeMillis())); 
        newBorrow.put("due_date", new java.sql.Date(dueDate.getTime()));
        newBorrow.put("return_date", null);
        newBorrow.put("fine", 0.0);

        homePage.borrowsList.add(newBorrow);
        homePage.toBeAddedBRB.add(newBorrow);
        
        int currentAvailable = (int) bookToBorrow.get("available_copies");

        
        Map<String, Object> updatedBook = null;
        for (int i = 0; i < homePage.booksList.size(); i++) {
            Map<String, Object> book = homePage.booksList.get(i);
            if (book.get("book_id").equals(bookId)) {
                updatedBook = new HashMap<>(book); 
                updatedBook.put("available_copies", currentAvailable - 1);
                
                homePage.booksList.remove(i);
                break;
            }
        }
        
        if (updatedBook != null) {
            homePage.booksList.add(updatedBook);
            homePage.toBeUpdatedMB.add(updatedBook);
            homePage.tracker.add("updateMB");
            homePage.tracker.add("addBRB");
            System.out.println("Book updated successfully: " + updatedBook);
        } else {
            System.out.println("Error: Book not found in booksList.");
        }
        
        homePage.refreshMBTable();
        homePage.refreshBRBTable();
        this.dispose(); 
        
    }//GEN-LAST:event_jButton1ActionPerformed
    
        private void populateComboBoxes() {
        for (Map<String, Object> book : homePage.booksList) {
            String bookName = (String) book.get("title");
            Bookname.addItem(bookName);
        }

        for (Map<String, Object> user : homePage.usersList) {
            String username = (String) user.get("username");
            Username.addItem(username);
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddBorrows.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddBorrows.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddBorrows.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddBorrows.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                AddBorrows obj = new AddBorrows(homePage);
                obj.setVisible(true);
           
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> Bookname;
    private org.jdesktop.swingx.JXDatePicker DueDate;
    private javax.swing.JComboBox<String> Username;
    private javax.swing.JButton jButton1;
    private com.toedter.calendar.JDayChooser jDayChooser1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea2;
    // End of variables declaration//GEN-END:variables
}
